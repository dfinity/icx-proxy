name: Release

on:
  push:
    branches:
      - main
      - macos-binary

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust: [ '1.55.0' ]
        target: [ x86_64-apple-darwin, x86_64-unknown-linux-musl, x86_64-unknown-linux-gnu ]
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_path: target/release
            name: macos
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_path: target/x86_64-unknown-linux-musl/release
            name: linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_path: target/x86_64-unknown-linux-gnu/release
            name: linux-gnu
    steps:
    - uses: actions/checkout@v2

    - name: Setup environment variables
      run: |
        echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "OPENSSL_STATIC=yes" >> $GITHUB_ENV
        echo ICX_VERSION=$(cargo metadata | jq -r '.["packages"][] | select(.name == "icx-proxy")["version"]') >> $GITHUB_ENV

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
      if: contains(matrix.os, 'macos')

    - name: Linux hack (musl only)
      run: |
          echo "1.58.1" >./rust-toolchain
      if: contains(matrix.target, 'linux-musl')

    - name: Linux build (musl)
      uses: dfinity/rust-musl-action@master
      with:
        args: |
          cargo install cargo-deb --target x86_64-unknown-linux-musl
          echo "1.55.0" >./rust-toolchain
          rustup target add x86_64-unknown-linux-musl
          RUSTFLAGS="--remap-path-prefix=${GITHUB_WORKSPACE}=/builds/dfinity" cargo deb --target x86_64-unknown-linux-musl -- --locked
      if: contains(matrix.target, 'linux-musl')

    - name: Linux build (gnu)
      env:
        RUSTFLAGS: --remap-path-prefix=${GITHUB_WORKSPACE}=/builds/dfinity
      run: |
        cargo build --locked --release --target x86_64-unknown-linux-gnu
        cd ${{ matrix.binary_path }} 
        ldd icx-proxy
      if: contains(matrix.target, 'linux-gnu')

    - name: macOS build
      env:
        RUSTFLAGS: --remap-path-prefix=${GITHUB_WORKSPACE}=/builds/dfinity
      run: |
        cargo build --locked --release
        cd target/release
        otool -L icx-proxy
      if: contains(matrix.os, 'macos')

    - name: Create tarball of binaries
      run: tar -zcC ${{ matrix.binary_path }} -f binaries.tar.gz icx-proxy

    - name: Inspect input binary and tarball contents
      run: |
        hexdump -C ${{ matrix.binary_path }}/icx-proxy | head
        hexdump -C ${{ matrix.binary_path }}/icx-proxy | tail
        ${{ matrix.binary_path }}/icx-proxy --help
        
        ARCHIVE="$(pwd)/binaries.tar.gz"
        cd "$(mktemp -d)"
        tar --version
        tar -xzvf "$ARCHIVE"
        ls -l icx-proxy
        hexdump -C icx-proxy | head
        hexdump -C icx-proxy | tail
        ./icx-proxy --help

    - name: Upload tarball artifact
      uses: actions/upload-artifact@v2
      with:
        name: tarball-${{ matrix.name }}
        path: binaries.tar.gz
    - name: Copy deb artifact
      run: target/x86_64-unknown-linux-musl/debian/icx-proxy_${{ env.ICX_VERSION }}_amd64.deb icx-proxy.deb
      if: contains(matrix.target, 'linux-musl')
    - name: Upload deb artifact
      uses: actions/upload-artifact@v2
      with:
        name: deb-${{ matrix.name }}
        path: icx-proxy.deb
      if: contains(matrix.target, 'linux-musl')

  upload:
    runs-on: ${{ matrix.os }}
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        rust: [ '1.55.0' ]
        target: [ x86_64-apple-darwin, x86_64-unknown-linux-musl, x86_64-unknown-linux-gnu ]
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-gnu
    steps:
      - name: Setup environment variables
        run: echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Download tarball artifact
        uses: actions/download-artifact@v2
        with:
          name: tarball-${{ matrix.name }}
      - name: Download deb artifact
        uses: actions/download-artifact@v2
        with:
          name: deb-${{ matrix.name }}
        if: contains(matrix.target, 'linux-musl')

      - name: Look at files
        run: ls -l

      - name: Upload tarball
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: binaries.tar.gz
          asset_name: binaries-${{ matrix.name }}.tar.gz
          tag: ${{ env.SHA_SHORT }}

      - name: Upload deb
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: icx-proxy.deb
          tag: ${{ env.SHA_SHORT }}
        if: contains(matrix.target, 'linux-musl')

